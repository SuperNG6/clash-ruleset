# .github/scripts/merge_rules.py
import requests
import yaml
from datetime import datetime
import os

def get_raw_content_url(github_url):
    return github_url.replace('github.com', 'raw.githubusercontent.com').replace('/blob/', '/')

def download_rules(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.text
    except Exception as e:
        print(f"Error downloading rules from {url}: {e}")
        return None

def parse_rules(content):
    # 使用 yaml.safe_load_all 来保留注释
    rules = list(yaml.safe_load_all(content))
    if rules:
        return rules[0]
    return None

def merge_rules():
    sources = [
        "https://github.com/blackmatrix7/ios_rule_script/blob/master/rule/Clash/Gemini/Gemini.yaml",
        "https://github.com/blackmatrix7/ios_rule_script/blob/master/rule/Clash/OpenAI/OpenAI.yaml",
        "https://github.com/blackmatrix7/ios_rule_script/blob/master/rule/Clash/Claude/Claude.yaml"
    ]

    all_rules = {
        'DOMAIN': set(),
        'DOMAIN-SUFFIX': set(),
        'DOMAIN-KEYWORD': set(),
        'IP-CIDR': set(),
        'IP-ASN': set()
    }
    
    for source in sources:
        raw_url = get_raw_content_url(source)
        content = download_rules(raw_url)
        if content:
            rules = parse_rules(content)
            if rules and 'payload' in rules:
                for rule in rules['payload']:
                    for key in all_rules.keys():
                        if rule.startswith(key):
                            all_rules[key].add(rule)

    # 合并所有规则
    total_rules = sum(len(rules) for rules in all_rules.values())
    
    # 创建输出内容
    output = f"""# NAME: AI
# AUTHOR: Generated by GitHub Action
# REPO: https://github.com/blackmatrix7/ios_rule_script
# UPDATED: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
# DOMAIN: {len(all_rules['DOMAIN'])}
# DOMAIN-SUFFIX: {len(all_rules['DOMAIN-SUFFIX'])}
# DOMAIN-KEYWORD: {len(all_rules['DOMAIN-KEYWORD'])}
# IP-CIDR: {len(all_rules['IP-CIDR'])}
# IP-ASN: {len(all_rules['IP-ASN'])}
# TOTAL: {total_rules}
payload:
"""

    # 按类型添加规则
    for rule_type in ['DOMAIN', 'DOMAIN-SUFFIX', 'DOMAIN-KEYWORD', 'IP-CIDR', 'IP-ASN']:
        sorted_rules = sorted(all_rules[rule_type])
        for rule in sorted_rules:
            output += f"  - {rule}\n"

    # 确保输出目录存在
    os.makedirs('rules', exist_ok=True)
    
    # 写入合并后的规则
    with open('rules/ai_rules.yaml', 'w', encoding='utf-8') as f:
        f.write(output)

if __name__ == '__main__':
    merge_rules()